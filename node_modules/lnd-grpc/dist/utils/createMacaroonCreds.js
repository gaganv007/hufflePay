"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getMacaroon = exports.default = void 0;
var _fs = _interopRequireDefault(require("fs"));
var _util = require("util");
var _path = require("path");
var _untildify = _interopRequireDefault(require("untildify"));
var _decodeMacaroon = _interopRequireDefault(require("lndconnect/decodeMacaroon"));
var _grpcJs = require("@grpc/grpc-js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const readFile = (0, _util.promisify)(_fs.default.readFile);

/**
 * Extract macaroon hex from various sources.
 * @param {String} macaroonPath
 * @returns {String} Hex encoded macaroon.
 */
const getMacaroon = async macaroonPath => {
  let lndMacaroon;
  if (macaroonPath) {
    // If the macaroon is already in hex format, add as is.
    const isHex = /^[0-9a-fA-F]+$/.test(macaroonPath);
    if (isHex) {
      lndMacaroon = macaroonPath;
    }
    // If it's not a filepath, then assume it is a base64url encoded string.
    else if (macaroonPath === (0, _path.basename)(macaroonPath)) {
      lndMacaroon = (0, _decodeMacaroon.default)(macaroonPath);
    }
    // Otherwise, treat it as a file path - load the file and convert to hex.
    else {
      const macaroon = await readFile((0, _untildify.default)(macaroonPath)).catch(e => {
        const error = new Error(`Macaroon path could not be accessed: ${e.message}`);
        error.code = 'LND_GRPC_MACAROON_ERROR';
        throw error;
      });
      lndMacaroon = macaroon.toString('hex');
    }
  }
  return lndMacaroon;
};

/**
 * Validates and creates the macaroon authorization credentials from the specified file path
 * @param {String} macaroonPath
 * @returns {grpc.CallCredentials}
 */
exports.getMacaroon = getMacaroon;
const createMacaroonCreds = async macaroonPath => {
  let lndMacaroon = await getMacaroon(macaroonPath);
  const metadata = new _grpcJs.Metadata();
  metadata.add('macaroon', lndMacaroon);
  return _grpcJs.credentials.createFromMetadataGenerator((params, callback) => callback(null, metadata));
};
var _default = createMacaroonCreds;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZWFkRmlsZSIsInByb21pc2lmeSIsImZzIiwiZ2V0TWFjYXJvb24iLCJtYWNhcm9vblBhdGgiLCJsbmRNYWNhcm9vbiIsImlzSGV4IiwidGVzdCIsImJhc2VuYW1lIiwiZGVjb2RlTWFjYXJvb24iLCJtYWNhcm9vbiIsInVudGlsZGlmeSIsImNhdGNoIiwiZSIsImVycm9yIiwiRXJyb3IiLCJtZXNzYWdlIiwiY29kZSIsInRvU3RyaW5nIiwiY3JlYXRlTWFjYXJvb25DcmVkcyIsIm1ldGFkYXRhIiwiTWV0YWRhdGEiLCJhZGQiLCJjcmVkZW50aWFscyIsImNyZWF0ZUZyb21NZXRhZGF0YUdlbmVyYXRvciIsInBhcmFtcyIsImNhbGxiYWNrIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL3V0aWxzL2NyZWF0ZU1hY2Fyb29uQ3JlZHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGZzIGZyb20gJ2ZzJ1xuaW1wb3J0IHsgcHJvbWlzaWZ5IH0gZnJvbSAndXRpbCdcbmltcG9ydCB7IGJhc2VuYW1lIH0gZnJvbSAncGF0aCdcbmltcG9ydCB1bnRpbGRpZnkgZnJvbSAndW50aWxkaWZ5J1xuaW1wb3J0IGRlY29kZU1hY2Fyb29uIGZyb20gJ2xuZGNvbm5lY3QvZGVjb2RlTWFjYXJvb24nXG5pbXBvcnQgeyBjcmVkZW50aWFscywgTWV0YWRhdGEgfSBmcm9tICdAZ3JwYy9ncnBjLWpzJ1xuXG5jb25zdCByZWFkRmlsZSA9IHByb21pc2lmeShmcy5yZWFkRmlsZSlcblxuLyoqXG4gKiBFeHRyYWN0IG1hY2Fyb29uIGhleCBmcm9tIHZhcmlvdXMgc291cmNlcy5cbiAqIEBwYXJhbSB7U3RyaW5nfSBtYWNhcm9vblBhdGhcbiAqIEByZXR1cm5zIHtTdHJpbmd9IEhleCBlbmNvZGVkIG1hY2Fyb29uLlxuICovXG5leHBvcnQgY29uc3QgZ2V0TWFjYXJvb24gPSBhc3luYyAobWFjYXJvb25QYXRoKSA9PiB7XG4gIGxldCBsbmRNYWNhcm9vblxuXG4gIGlmIChtYWNhcm9vblBhdGgpIHtcbiAgICAvLyBJZiB0aGUgbWFjYXJvb24gaXMgYWxyZWFkeSBpbiBoZXggZm9ybWF0LCBhZGQgYXMgaXMuXG4gICAgY29uc3QgaXNIZXggPSAvXlswLTlhLWZBLUZdKyQvLnRlc3QobWFjYXJvb25QYXRoKVxuICAgIGlmIChpc0hleCkge1xuICAgICAgbG5kTWFjYXJvb24gPSBtYWNhcm9vblBhdGhcbiAgICB9XG4gICAgLy8gSWYgaXQncyBub3QgYSBmaWxlcGF0aCwgdGhlbiBhc3N1bWUgaXQgaXMgYSBiYXNlNjR1cmwgZW5jb2RlZCBzdHJpbmcuXG4gICAgZWxzZSBpZiAobWFjYXJvb25QYXRoID09PSBiYXNlbmFtZShtYWNhcm9vblBhdGgpKSB7XG4gICAgICBsbmRNYWNhcm9vbiA9IGRlY29kZU1hY2Fyb29uKG1hY2Fyb29uUGF0aClcbiAgICB9XG4gICAgLy8gT3RoZXJ3aXNlLCB0cmVhdCBpdCBhcyBhIGZpbGUgcGF0aCAtIGxvYWQgdGhlIGZpbGUgYW5kIGNvbnZlcnQgdG8gaGV4LlxuICAgIGVsc2Uge1xuICAgICAgY29uc3QgbWFjYXJvb24gPSBhd2FpdCByZWFkRmlsZSh1bnRpbGRpZnkobWFjYXJvb25QYXRoKSkuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoYE1hY2Fyb29uIHBhdGggY291bGQgbm90IGJlIGFjY2Vzc2VkOiAke2UubWVzc2FnZX1gKVxuICAgICAgICBlcnJvci5jb2RlID0gJ0xORF9HUlBDX01BQ0FST09OX0VSUk9SJ1xuICAgICAgICB0aHJvdyBlcnJvclxuICAgICAgfSlcbiAgICAgIGxuZE1hY2Fyb29uID0gbWFjYXJvb24udG9TdHJpbmcoJ2hleCcpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGxuZE1hY2Fyb29uXG59XG5cbi8qKlxuICogVmFsaWRhdGVzIGFuZCBjcmVhdGVzIHRoZSBtYWNhcm9vbiBhdXRob3JpemF0aW9uIGNyZWRlbnRpYWxzIGZyb20gdGhlIHNwZWNpZmllZCBmaWxlIHBhdGhcbiAqIEBwYXJhbSB7U3RyaW5nfSBtYWNhcm9vblBhdGhcbiAqIEByZXR1cm5zIHtncnBjLkNhbGxDcmVkZW50aWFsc31cbiAqL1xuY29uc3QgY3JlYXRlTWFjYXJvb25DcmVkcyA9IGFzeW5jIChtYWNhcm9vblBhdGgpID0+IHtcbiAgbGV0IGxuZE1hY2Fyb29uID0gYXdhaXQgZ2V0TWFjYXJvb24obWFjYXJvb25QYXRoKVxuXG4gIGNvbnN0IG1ldGFkYXRhID0gbmV3IE1ldGFkYXRhKClcbiAgbWV0YWRhdGEuYWRkKCdtYWNhcm9vbicsIGxuZE1hY2Fyb29uKVxuXG4gIHJldHVybiBjcmVkZW50aWFscy5jcmVhdGVGcm9tTWV0YWRhdGFHZW5lcmF0b3IoKHBhcmFtcywgY2FsbGJhY2spID0+IGNhbGxiYWNrKG51bGwsIG1ldGFkYXRhKSlcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlTWFjYXJvb25DcmVkc1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBcUQ7QUFFckQsTUFBTUEsUUFBUSxHQUFHLElBQUFDLGVBQVMsRUFBQ0MsV0FBRSxDQUFDRixRQUFRLENBQUM7O0FBRXZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxNQUFNRyxXQUFXLEdBQUcsTUFBT0MsWUFBWSxJQUFLO0VBQ2pELElBQUlDLFdBQVc7RUFFZixJQUFJRCxZQUFZLEVBQUU7SUFDaEI7SUFDQSxNQUFNRSxLQUFLLEdBQUcsZ0JBQWdCLENBQUNDLElBQUksQ0FBQ0gsWUFBWSxDQUFDO0lBQ2pELElBQUlFLEtBQUssRUFBRTtNQUNURCxXQUFXLEdBQUdELFlBQVk7SUFDNUI7SUFDQTtJQUFBLEtBQ0ssSUFBSUEsWUFBWSxLQUFLLElBQUFJLGNBQVEsRUFBQ0osWUFBWSxDQUFDLEVBQUU7TUFDaERDLFdBQVcsR0FBRyxJQUFBSSx1QkFBYyxFQUFDTCxZQUFZLENBQUM7SUFDNUM7SUFDQTtJQUFBLEtBQ0s7TUFDSCxNQUFNTSxRQUFRLEdBQUcsTUFBTVYsUUFBUSxDQUFDLElBQUFXLGtCQUFTLEVBQUNQLFlBQVksQ0FBQyxDQUFDLENBQUNRLEtBQUssQ0FBRUMsQ0FBQyxJQUFLO1FBQ3BFLE1BQU1DLEtBQUssR0FBRyxJQUFJQyxLQUFLLENBQUUsd0NBQXVDRixDQUFDLENBQUNHLE9BQVEsRUFBQyxDQUFDO1FBQzVFRixLQUFLLENBQUNHLElBQUksR0FBRyx5QkFBeUI7UUFDdEMsTUFBTUgsS0FBSztNQUNiLENBQUMsQ0FBQztNQUNGVCxXQUFXLEdBQUdLLFFBQVEsQ0FBQ1EsUUFBUSxDQUFDLEtBQUssQ0FBQztJQUN4QztFQUNGO0VBRUEsT0FBT2IsV0FBVztBQUNwQixDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFKQTtBQUtBLE1BQU1jLG1CQUFtQixHQUFHLE1BQU9mLFlBQVksSUFBSztFQUNsRCxJQUFJQyxXQUFXLEdBQUcsTUFBTUYsV0FBVyxDQUFDQyxZQUFZLENBQUM7RUFFakQsTUFBTWdCLFFBQVEsR0FBRyxJQUFJQyxnQkFBUSxFQUFFO0VBQy9CRCxRQUFRLENBQUNFLEdBQUcsQ0FBQyxVQUFVLEVBQUVqQixXQUFXLENBQUM7RUFFckMsT0FBT2tCLG1CQUFXLENBQUNDLDJCQUEyQixDQUFDLENBQUNDLE1BQU0sRUFBRUMsUUFBUSxLQUFLQSxRQUFRLENBQUMsSUFBSSxFQUFFTixRQUFRLENBQUMsQ0FBQztBQUNoRyxDQUFDO0FBQUEsZUFFY0QsbUJBQW1CO0FBQUEifQ==