"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = tor;
var _child_process = _interopRequireDefault(require("child_process"));
var _fs = _interopRequireDefault(require("fs"));
var _os = _interopRequireDefault(require("os"));
var _path = _interopRequireDefault(require("path"));
var _debug = _interopRequireDefault(require("debug"));
var _getPort = _interopRequireDefault(require("get-port"));
var _delay = _interopRequireDefault(require("./delay"));
var _constants = require("./constants");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const debug = (0, _debug.default)('lnrpc:tor');
const debugTor = (0, _debug.default)('lnrpc:torproc');
function tor({
  cwd
} = {}) {
  let proc = null;
  const isStarted = () => Boolean(proc && proc.pid);

  /**
   * start - Start Tor tunnel service.
   * @param  {object}  settings Settings
   * @param  {string}  settings.datadir Data dir
   *
   * @return {Promise} Promise that resolves once the service is ready to use
   */
  const start = async () => {
    if (isStarted()) {
      throw new Error('Tor is already already running');
    }
    const datadir = cwd || _fs.default.mkdtempSync(_path.default.join(_os.default.tmpdir(), 'lnd-grpc-'));
    const torrcpath = _path.default.join(datadir, 'torrc');
    const datapath = _path.default.join(datadir, 'data');
    const host = '127.0.0.1';
    const port = await (0, _getPort.default)({
      host,
      port: _getPort.default.makeRange(9065, 9999)
    });
    const httpTunnelPort = `${host}:${port}`;
    const settings = {
      DataDirectory: datapath,
      HTTPTunnelPort: httpTunnelPort,
      SocksPort: 0
    };
    debug('Starting tor with settings: %o', settings);
    const torrc = Object.entries(settings).reduce((acc, [key, value]) => {
      return acc += `${key} ${value}\n`;
    }, '');
    _fs.default.writeFileSync(torrcpath, torrc);
    debug('Generated torrc at %s:\n%s', torrcpath, torrc);
    process.env.grpc_proxy = `http://${httpTunnelPort}`;
    debug('Setting grpc_proxy as: %s', process.env.grpc_proxy);
    proc = _child_process.default.spawn('tor', ['-f', torrcpath], {
      cwd: datadir
    });
    debug('Started tor process with pid: %s', proc.pid);
    process.on('exit', () => {
      proc.kill();
    });
    process.on('uncaughtException', () => {
      proc.kill();
    });
    return new Promise((resolve, reject) => {
      proc.stdout.on('data', async data => {
        debugTor(data.toString().trim());
        if (data.toString().indexOf('Bootstrapped 100%') !== -1) {
          await (0, _delay.default)(_constants.TOR_WAIT_TIMEOUT);
          resolve(true);
        }
        if (data.toString().indexOf('[error]') !== -1) {
          reject(data.toString());
        }
      });
    });
  };

  /**
   * Stop Tor service.
   */
  const stop = async () => {
    if (isStarted()) {
      debug('Stopping tor with pid: %o', proc.pid);
      const waitForExit = new Promise((resolve, reject) => {
        proc.on('exit', () => {
          debug('Stopped tor with pid: %o', proc.pid);
          delete process.env.grpc_proxy;
          resolve();
        });
      });
      proc.kill('SIGKILL');
      return waitForExit;
    }
  };
  return {
    start,
    stop,
    isStarted
  };
}
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,