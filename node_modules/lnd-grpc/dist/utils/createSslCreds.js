"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _fs = _interopRequireDefault(require("fs"));
var _util = require("util");
var _path = require("path");
var _untildify = _interopRequireDefault(require("untildify"));
var _decodeCert = _interopRequireDefault(require("lndconnect/decodeCert"));
var _grpcJs = require("@grpc/grpc-js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const readFile = (0, _util.promisify)(_fs.default.readFile);

/**
 * Validates and creates the ssl channel credentials from the specified file path
 * @param {String} certPath
 * @returns {grpc.ChanelCredentials}
 */
const createSslCreds = async certPath => {
  let lndCert;
  if (certPath) {
    // If the cert has been provided in PEM format, use as is.
    if (certPath.split(/\n/)[0] === '-----BEGIN CERTIFICATE-----') {
      lndCert = new Buffer.from(certPath);
    }
    // If it's not a filepath, then assume it is a base64url encoded string.
    else if (certPath === (0, _path.basename)(certPath)) {
      lndCert = (0, _decodeCert.default)(certPath);
      lndCert = new Buffer.from(lndCert);
    }
    // Otherwise, lets treat it as a file path.
    else {
      lndCert = await readFile((0, _untildify.default)(certPath)).catch(e => {
        const error = new Error(`SSL cert path could not be accessed: ${e.message}`);
        error.code = 'LND_GRPC_CERT_ERROR';
        throw error;
      });
    }
  }
  return _grpcJs.credentials.createSsl(lndCert);
};
var _default = createSslCreds;
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZWFkRmlsZSIsInByb21pc2lmeSIsImZzIiwiY3JlYXRlU3NsQ3JlZHMiLCJjZXJ0UGF0aCIsImxuZENlcnQiLCJzcGxpdCIsIkJ1ZmZlciIsImZyb20iLCJiYXNlbmFtZSIsImRlY29kZUNlcnQiLCJ1bnRpbGRpZnkiLCJjYXRjaCIsImUiLCJlcnJvciIsIkVycm9yIiwibWVzc2FnZSIsImNvZGUiLCJjcmVkZW50aWFscyIsImNyZWF0ZVNzbCJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9jcmVhdGVTc2xDcmVkcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZnMgZnJvbSAnZnMnXG5pbXBvcnQgeyBwcm9taXNpZnkgfSBmcm9tICd1dGlsJ1xuaW1wb3J0IHsgYmFzZW5hbWUgfSBmcm9tICdwYXRoJ1xuaW1wb3J0IHVudGlsZGlmeSBmcm9tICd1bnRpbGRpZnknXG5pbXBvcnQgZGVjb2RlQ2VydCBmcm9tICdsbmRjb25uZWN0L2RlY29kZUNlcnQnXG5pbXBvcnQgeyBjcmVkZW50aWFscyB9IGZyb20gJ0BncnBjL2dycGMtanMnXG5cbmNvbnN0IHJlYWRGaWxlID0gcHJvbWlzaWZ5KGZzLnJlYWRGaWxlKVxuXG4vKipcbiAqIFZhbGlkYXRlcyBhbmQgY3JlYXRlcyB0aGUgc3NsIGNoYW5uZWwgY3JlZGVudGlhbHMgZnJvbSB0aGUgc3BlY2lmaWVkIGZpbGUgcGF0aFxuICogQHBhcmFtIHtTdHJpbmd9IGNlcnRQYXRoXG4gKiBAcmV0dXJucyB7Z3JwYy5DaGFuZWxDcmVkZW50aWFsc31cbiAqL1xuY29uc3QgY3JlYXRlU3NsQ3JlZHMgPSBhc3luYyAoY2VydFBhdGgpID0+IHtcbiAgbGV0IGxuZENlcnRcbiAgaWYgKGNlcnRQYXRoKSB7XG4gICAgLy8gSWYgdGhlIGNlcnQgaGFzIGJlZW4gcHJvdmlkZWQgaW4gUEVNIGZvcm1hdCwgdXNlIGFzIGlzLlxuICAgIGlmIChjZXJ0UGF0aC5zcGxpdCgvXFxuLylbMF0gPT09ICctLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0nKSB7XG4gICAgICBsbmRDZXJ0ID0gbmV3IEJ1ZmZlci5mcm9tKGNlcnRQYXRoKVxuICAgIH1cbiAgICAvLyBJZiBpdCdzIG5vdCBhIGZpbGVwYXRoLCB0aGVuIGFzc3VtZSBpdCBpcyBhIGJhc2U2NHVybCBlbmNvZGVkIHN0cmluZy5cbiAgICBlbHNlIGlmIChjZXJ0UGF0aCA9PT0gYmFzZW5hbWUoY2VydFBhdGgpKSB7XG4gICAgICBsbmRDZXJ0ID0gZGVjb2RlQ2VydChjZXJ0UGF0aClcbiAgICAgIGxuZENlcnQgPSBuZXcgQnVmZmVyLmZyb20obG5kQ2VydClcbiAgICB9XG4gICAgLy8gT3RoZXJ3aXNlLCBsZXRzIHRyZWF0IGl0IGFzIGEgZmlsZSBwYXRoLlxuICAgIGVsc2Uge1xuICAgICAgbG5kQ2VydCA9IGF3YWl0IHJlYWRGaWxlKHVudGlsZGlmeShjZXJ0UGF0aCkpLmNhdGNoKChlKSA9PiB7XG4gICAgICAgIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKGBTU0wgY2VydCBwYXRoIGNvdWxkIG5vdCBiZSBhY2Nlc3NlZDogJHtlLm1lc3NhZ2V9YClcbiAgICAgICAgZXJyb3IuY29kZSA9ICdMTkRfR1JQQ19DRVJUX0VSUk9SJ1xuICAgICAgICB0aHJvdyBlcnJvclxuICAgICAgfSlcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNyZWRlbnRpYWxzLmNyZWF0ZVNzbChsbmRDZXJ0KVxufVxuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVTc2xDcmVkc1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBMkM7QUFFM0MsTUFBTUEsUUFBUSxHQUFHLElBQUFDLGVBQVMsRUFBQ0MsV0FBRSxDQUFDRixRQUFRLENBQUM7O0FBRXZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNRyxjQUFjLEdBQUcsTUFBT0MsUUFBUSxJQUFLO0VBQ3pDLElBQUlDLE9BQU87RUFDWCxJQUFJRCxRQUFRLEVBQUU7SUFDWjtJQUNBLElBQUlBLFFBQVEsQ0FBQ0UsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLDZCQUE2QixFQUFFO01BQzdERCxPQUFPLEdBQUcsSUFBSUUsTUFBTSxDQUFDQyxJQUFJLENBQUNKLFFBQVEsQ0FBQztJQUNyQztJQUNBO0lBQUEsS0FDSyxJQUFJQSxRQUFRLEtBQUssSUFBQUssY0FBUSxFQUFDTCxRQUFRLENBQUMsRUFBRTtNQUN4Q0MsT0FBTyxHQUFHLElBQUFLLG1CQUFVLEVBQUNOLFFBQVEsQ0FBQztNQUM5QkMsT0FBTyxHQUFHLElBQUlFLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDSCxPQUFPLENBQUM7SUFDcEM7SUFDQTtJQUFBLEtBQ0s7TUFDSEEsT0FBTyxHQUFHLE1BQU1MLFFBQVEsQ0FBQyxJQUFBVyxrQkFBUyxFQUFDUCxRQUFRLENBQUMsQ0FBQyxDQUFDUSxLQUFLLENBQUVDLENBQUMsSUFBSztRQUN6RCxNQUFNQyxLQUFLLEdBQUcsSUFBSUMsS0FBSyxDQUFFLHdDQUF1Q0YsQ0FBQyxDQUFDRyxPQUFRLEVBQUMsQ0FBQztRQUM1RUYsS0FBSyxDQUFDRyxJQUFJLEdBQUcscUJBQXFCO1FBQ2xDLE1BQU1ILEtBQUs7TUFDYixDQUFDLENBQUM7SUFDSjtFQUNGO0VBQ0EsT0FBT0ksbUJBQVcsQ0FBQ0MsU0FBUyxDQUFDZCxPQUFPLENBQUM7QUFDdkMsQ0FBQztBQUFBLGVBRWNGLGNBQWM7QUFBQTtBQUFBIn0=