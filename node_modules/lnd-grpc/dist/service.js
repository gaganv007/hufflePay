"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _path = require("path");
var _events = _interopRequireDefault(require("events"));
var _lodash = _interopRequireDefault(require("lodash.defaultsdeep"));
var _grpcJs = require("@grpc/grpc-js");
var _protoLoader = require("@grpc/proto-loader");
var _javascriptStateMachine = _interopRequireDefault(require("javascript-state-machine"));
var _debug = _interopRequireDefault(require("debug"));
var _utils = require("./utils");
var _registry = _interopRequireDefault(require("./registry"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
const DEFAULT_OPTIONS = {
  grpcOptions: _utils.grpcOptions,
  // Disable message size size enforcement.
  connectionOptions: {
    'grpc.max_send_message_length': -1,
    'grpc.max_receive_message_length': -1,
    'grpc.keepalive_permit_without_calls': 1
  }
};

/**
 * Base class for lnd gRPC services.
 * @extends EventEmitter
 */
let Service = /*#__PURE__*/function (_EventEmitter) {
  _inherits(Service, _EventEmitter);
  var _super = _createSuper(Service);
  function Service(serviceName, options) {
    var _this;
    _classCallCheck(this, Service);
    _this = _super.call(this);
    _this.serviceName = serviceName;
    _this.fsm = new _javascriptStateMachine.default({
      init: 'ready',
      transitions: [{
        name: 'connect',
        from: 'ready',
        to: 'connected'
      }, {
        name: 'disconnect',
        from: 'connected',
        to: 'ready'
      }],
      methods: {
        onBeforeConnect: _this.onBeforeConnect.bind(_assertThisInitialized(_this)),
        onAfterConnect: _this.onAfterConnect.bind(_assertThisInitialized(_this)),
        onBeforeDisconnect: _this.onBeforeDisconnect.bind(_assertThisInitialized(_this)),
        onAfterDisconnect: _this.onAfterDisconnect.bind(_assertThisInitialized(_this)),
        onInvalidTransition: _utils.onInvalidTransition,
        onPendingTransition: _utils.onPendingTransition
      }
    });
    _this.useMacaroon = true;
    _this.service = null;
    _this.options = (0, _lodash.default)(options, DEFAULT_OPTIONS);
    _this.debug = (0, _debug.default)(`lnrpc:service:${_this.serviceName}`);
    return _this;
  }

  // ------------------------------------
  // FSM Proxies
  // ------------------------------------
  _createClass(Service, [{
    key: "is",
    value: function is(...args) {
      return this.fsm.is(...args);
    }
  }, {
    key: "can",
    value: function can(...args) {
      return this.fsm.can(...args);
    }
  }, {
    key: "observe",
    value: function observe(...args) {
      return this.fsm.observe(...args);
    }
  }, {
    key: "state",
    get: function () {
      return this.fsm.state;
    }
  }, {
    key: "connect",
    value: function connect(...args) {
      return this.fsm.connect(...args);
    }
  }, {
    key: "disconnect",
    value: function disconnect(...args) {
      return this.fsm.disconnect(...args);
    }

    // ------------------------------------
    // FSM Callbacks
    // ------------------------------------

    /**
     * Connect to the gRPC interface.
     */
  }, {
    key: "onBeforeConnect",
    value: async function onBeforeConnect(lifecycle, options) {
      this.debug(`Connecting to ${this.serviceName} gRPC service`);
      await (0, _utils.promiseTimeout)(_utils.SERVICE_CONNECT_TIMEOUT * 1000, this.establishConnection(options), 'Connection timeout out.');
    }

    /**
     * Log successful connection.
     */
  }, {
    key: "onAfterConnect",
    value: function onAfterConnect() {
      this.debug(`Connected to ${this.serviceName} gRPC service`);
    }

    /**
     * Disconnect from the gRPC service.
     */
  }, {
    key: "onBeforeDisconnect",
    value: async function onBeforeDisconnect() {
      this.debug(`Disconnecting from ${this.serviceName} gRPC service`);
      if (this.service) {
        this.service.close();
      }
    }

    /**
     * Log successful disconnect.
     */
  }, {
    key: "onAfterDisconnect",
    value: function onAfterDisconnect() {
      this.debug(`Disconnected from ${this.serviceName} gRPC service`);
    }

    // ------------------------------------
    // Helpers
    // ------------------------------------

    /**
     * Establish a connection to the Lightning interface.
     */
  }, {
    key: "establishConnection",
    value: async function establishConnection(options = {}) {
      const opts = (0, _lodash.default)(options, this.options);
      const host = opts.host,
        cert = opts.cert,
        macaroon = opts.macaroon,
        protoDir = opts.protoDir,
        waitForCert = opts.waitForCert,
        waitForMacaroon = opts.waitForMacaroon,
        grpcOptions = opts.grpcOptions,
        connectionOptions = opts.connectionOptions,
        version = opts.version;
      try {
        // Find the most recent proto file for this service if a specific version was not requested.
        this.version = version || this.version || (0, _utils.getLatestProtoVersion)();
        const serviceDefinition = _registry.default[this.version].services.find(s => s.name === this.serviceName);
        const _serviceDefinition$pr = serviceDefinition.proto.split('/'),
          _serviceDefinition$pr2 = _slicedToArray(_serviceDefinition$pr, 2),
          protoPackage = _serviceDefinition$pr2[0],
          protoFile = _serviceDefinition$pr2[1];
        const filepath = (0, _path.join)(protoDir || (0, _utils.getProtoDir)(), this.version, protoPackage, protoFile);
        this.debug(`Establishing gRPC connection to ${this.serviceName} with proto file %s and connection options %o`, filepath, connectionOptions);

        // Load gRPC package definition as a gRPC object hierarchy.
        const packageDefinition = await (0, _protoLoader.load)(filepath, grpcOptions);
        const rpc = (0, _grpcJs.loadPackageDefinition)(packageDefinition);

        // Wait for the cert to exist (this can take some time immediately after starting lnd).
        if (waitForCert) {
          const waitTime = Number.isFinite(waitForCert) ? waitForCert : _utils.FILE_WAIT_TIMEOUT;
          await (0, _utils.waitForFile)(cert, waitTime);
        }

        // Create ssl credentials to use with the gRPC client.
        let creds = await (0, _utils.createSslCreds)(cert);

        // Add macaroon to credentials if service requires macaroons.
        if (this.useMacaroon && macaroon) {
          // Wait for the macaroon to exist (this can take some time immediately after Initializing a wallet).
          if (waitForMacaroon) {
            const waitTime = Number.isFinite(waitForMacaroon) ? waitForMacaroon : _utils.FILE_WAIT_TIMEOUT;
            await (0, _utils.waitForFile)(macaroon, waitTime);
          }
          const macaroonCreds = await (0, _utils.createMacaroonCreds)(macaroon);
          creds = _grpcJs.credentials.combineChannelCredentials(creds, macaroonCreds);
        }

        // Create a new gRPC client instance.
        const rpcService = rpc[protoPackage][this.serviceName];
        this.service = new rpcService(host, creds, connectionOptions);

        // Wait up to CONNECT_WAIT_TIMEOUT seconds for the gRPC connection to be established.
        const timeeout = (0, _utils.isTor)(host) ? _utils.CONNECT_WAIT_TIMEOUT_TOR : _utils.CONNECT_WAIT_TIMEOUT;
        await (0, _utils.promisifiedCall)(this.service, this.service.waitForReady, (0, _utils.getDeadline)(timeeout));

        // Set up helper methods to proxy service methods.
        this.wrapAsync(rpcService.service);
      } catch (e) {
        this.debug(`Unable to connect to ${this.serviceName} service`, e);
        if (this.service) {
          this.service.close();
        }
        throw e;
      }
    }
  }, {
    key: "waitForCall",
    value: async function waitForCall(method, args) {
      this.debug('Attempting to call %s.%s with args %o (will keep trying to up to %s seconds)', this.serviceName, method, args, _utils.PROBE_TIMEOUT);
      const deadline = (0, _utils.getDeadline)(_utils.PROBE_TIMEOUT);
      const checkState = async err => {
        let now = new Date().getTime();
        const isExpired = now > deadline;
        if (err && isExpired) {
          throw err;
        }
        try {
          return await this[method](args);
        } catch (error) {
          if (error.code === _grpcJs.status.UNAVAILABLE) {
            await (0, _utils.delay)(_utils.PROBE_RETRY_INTERVAL);
            return checkState(error);
          }
          throw error;
        }
      };
      return await checkState();
    }

    /**
     * Add promisified helper methods for each method in the gRPC service.
     * Inspiration from https://github.com/altangent/lnd-async
     * @param {Object} service service description used to extract apply method details
     */
  }, {
    key: "wrapAsync",
    value: function wrapAsync(service) {
      Object.values(service).forEach(method => {
        const originalName = method.originalName;
        // Do not override existing methods.
        if (this[originalName]) {
          return;
        }
        // If this method is a stream, bind it to the service instance as is.
        if (method.requestStream || method.responseStream) {
          this[originalName] = (payload = {}, options = {}) => {
            this.debug(`Calling ${this.serviceName}.${originalName} sync with: %o`, {
              payload,
              options
            });
            return this.service[originalName].bind(this.service).call(this.service, payload, options);
          };
        }
        // Otherwise, promisify and bind to the service instance.
        else {
          this[originalName] = (payload = {}, options = {}) => {
            this.debug(`Calling ${this.serviceName}.${originalName} async with: %o`, {
              payload,
              options
            });
            return (0, _utils.promisifiedCall)(this.service, this.service[originalName], payload, options);
          };
        }
      });
    }
  }]);
  return Service;
}(_events.default);
var _default = Service;
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,